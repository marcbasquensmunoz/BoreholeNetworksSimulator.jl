
# Below is the template to run your tests in Julia
.test_template: &test_definition
  # Uncomment below if you would like to run the tests on specific references
  # only, such as the branches `master`, `development`, etc.
  # only:
  #   - master
  #   - development
  script:
    # Let's run the tests. Substitute `coverage = false` below, if you do not
    # want coverage results.
    - julia -e 'using Pkg; Pkg.add(path=pwd()); Pkg.build("BoreholeNetworksSimulator"); Pkg.test("BoreholeNetworksSimulator"; coverage = false)'
    # Comment out below if you do not want coverage results.
    #- julia -e 'using Pkg; Pkg.add("Coverage"); 
    #  import BoreholeNetworksSimulator; cd(joinpath(dirname(pathof(BoreholeNetworksSimulator)), ".."));
    #  using Coverage; cl, tl = get_summary(process_folder());
    #  println("(", cl/tl*100, "%) covered")'


test:1.10:
  image: julia:1.10
  <<: *test_definition

# REMARK: Do not forget to enable the coverage feature for your project, if you
# are using code coverage reporting above. This can be done by
#
# - Navigating to the `CI/CD Pipelines` settings of your project,
# - Copying and pasting the default `Simplecov` regex example provided, i.e.,
#   `\(\d+.\d+\%\) covered` in the `test coverage parsing` textfield.

# Example documentation deployment
pages:
  image: julia:1.10
  stage: deploy
  script:
    - apt-get update -qq && apt-get install -y git # needed by Documenter
    - julia -e 'using Pkg; Pkg.add(path=pwd()); Pkg.build("BoreholeNetworksSimulator");' # rebuild Julia (can be put somewhere else I'm sure
    - julia -e 'using Pkg; import BoreholeNetworksSimulator; Pkg.add("Documenter")' # install Documenter
    - julia --color=yes docs/make.jl # make documentation
    - mv docs/build public # move to the directory picked up by Gitlab pages
  artifacts:
    paths:
      - public
  #only:
  #- master
